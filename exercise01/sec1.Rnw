\section*{Problem 1}
\subsection*{a}
A point \( x^* \) is an equilibrium point iff:
\begin{align*}
    r x^* (1 - x^*) &= x^* \\
    r x^* (1 - x^*) - x^* &= 0 \\
    x^* (r - r x^* - 1) &= 0 \\
    x^* (r x^* - (r - 1)) &= 0 \\
    \\
    x_{1}^{*} &= 0 \\
    x_{2}^{*} &= \frac{r - 1}{r} & [\mbox{assuming \(r \neq 0 \)}]
\end{align*}
\subsection*{b}
To evaluate stability, we write \( x_{t + 1} = f(x_{t}) \), with \( f(x) = r x (1 - x) \). A point \( x^{*} \) is stable if \( |f'(x^{*})| < 1 \). We note that:
\begin{align*}
    f'(x) &= - 2rx + r \\
    \\
    f'(x_{1}^{*}) &= f'(0) = r \\
    \\
    f'(x_{2}^{*}) &= f'\left(\frac{r - 1}{r}\right) = -r + 2
\end{align*}
Thus \( x_{1}^{*} \) is stable iff \( |r| < 1 \iff r \in (-1, 1) \) and \( x_{2}^{*} \) is stable iff \( |-r + 2| < 1 \iff r \in (1, 3) \). Thus, the stabilities are as follows:

\begin{table}[h]
    \centering
    \begin{tabular}{|l||l|l|}
        \hline
        \( r \) & \( x_{1}^{*} = 0 \) & \( x_{2}^{*} = (r - 1)/r \) \\
        \hline
        \( 0.5 \) & Stable & Unstable \\
        \( 1.5 \) & Unstable & Stable \\
        \( 2.5 \) & Unstable & Stable \\
        \hline
    \end{tabular}
\end{table}

\subsection*{c}
To inspect the behaviour derived above, we will iterate the logistic map around fixed points and produce Poincar\'e plots of the sequence produced. The script that will be used to produce the plots is the following. It was adapted from \texttt{http://mqasim.me/?m=201507\&paged=5}.
<<>>=
stepf <- function(x, r, K) {
    return (r * x * (1 - x/K));
}

iterf <- function(start, f, N, K) {
    x <- numeric(N);
    x[1] <- start;
    for (i in 2:N) {
        x[i] <- f(x[i-1], r, K);
    }
    return (x);
}

coblines <- function(x, color) {
    N <- length(x);
    for (i in 2:N) {
        lines(x=c(x[i-1], x[i-1]), y=c(x[i-1], x[i]), col=color);
        lines(x=c(x[i-1], x[i]),   y=c(x[i],   x[i]), col=color);
    }
}

makeplot <- function(r, K, N, start, color, xmin, ymin, ymax) {
    # Plot f(x)
    title <- paste(
          "r = ", toString(r),
          ", x_0 = ", toString(round(start, 2)), sep=""
          );
    curve(
          stepf(x, r, K), xmin, K,
          n=100,
          xlim=c(xmin, K), ylim=c(ymin, ymax),
          lwd=2, col='black',
          main=title, xlab="x_t", ylab="x_t+1"
          );

    # Plot diagonal
    abline(0,1, lty=2);

    # Plot Poincare section
    coblines(iterf(start, stepf, N, K), color);

    # ... and a nice grid
    grid();
}
@
For some small value \( \epsilon > 0 \), we trace the behaviour of the system when started from \( x_{1}^{*} + \epsilon, x_{2}^{*} \pm \epsilon \), using the following code:
<<>>=
rs <- c(0.5, 1.5, 2.5);
xmins <- c(-1.5, 0, 0);
ymins <- c(-1.5, 0, 0);
ymaxs <- c(0.25, 0.5, 0.75);
ee <- 1e-1;

par(mfrow=c(3,3));
for (i in 1:3) {
    r <- rs[i];
    low_p <- 0 + ee;
    high_m <- (r - 1)/r - ee;
    high_p <- (r - 1)/r + ee;

    makeplot(r,1,200,low_p, 'green',xmins[i],ymins[i],ymaxs[i]);
    makeplot(r,1,200,high_m,'red',  xmins[i],ymins[i],ymaxs[i]);
    makeplot(r,1,200,high_p,'blue', xmins[i],ymins[i],ymaxs[i]);
}
@
As we can see in the plots, \( 0 \) is a stable fixed point only when \( r = 0.5 \); in all other cases it is unstable (trajectory diverges). On the contrary, \( (r-1)/r \) is unstable if \( r = 0.5 \), but is stable for \( r \in \{1.5, 2.5\} \), as predicted.

\subsection*{d \& e}
We can study the behaviour of the system in a similar fashion for \( r \in \{3.5, 3.9\} \). We know from theory that in a small vicinity around  \( r = 3.5 \), the system has \( 4 \) fixed points, whereas for larger values the system exhibits chaotic behaviour. To study these phenomena, we redo our Poincar\'e plots, but we do not display the first \( 50 \) steps of the sequences. Here is the script:
<<>>=
par(mfrow=c(2,3));
rs <- c(3.5, 3.9);
xmins <- c(0, 0);
ymins <- c(0, 0);
ymaxs <- c(1, 1);

for (i in 1:2) {
    r <- rs[i];
    low_p <-  tail(iterf(0+1e-1, stepf, 50, 1), n=1);
    high_m <- tail(iterf((r - 1)/r - 1e-1, stepf, 50, 1), n=1);
    high_p <- tail(iterf((r - 1)/r + 1e-1, stepf, 50, 1), n=1);

    makeplot(r,1,200,low_p, 'green',xmins[i],ymins[i],ymaxs[i]);
    makeplot(r,1,200,high_m,'red',  xmins[i],ymins[i],ymaxs[i]);
    makeplot(r,1,200,high_p,'blue', xmins[i],ymins[i],ymaxs[i]);
}
@
